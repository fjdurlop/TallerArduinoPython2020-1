widgets
	Tk
		.protocol(protocolo,cambia a ...)
		.quit() cierra
	Buttons
		anchor=
		    Controls where in the button the text (or image) should be located. Use one of N, NE, E, SE, S, SW, W, NW, or CENTER. Default is CENTER. (anchor/Anchor) 
		background=
		    The background color. The default is system specific. (background/Background)
		bg=
		    Same as background. 
		borderwidth=
		    The width of the button border. The default is platform specific, but is usually 1 or 2 pixels. (borderWidth/BorderWidth)
		bd=
		    Same as borderwidth.     
		command=
		    A function or method that is called when the button is pressed. The callback can be a function, bound method, or any other callable Python object. If this option is not used, nothing will happen when the user presses the button. (command/Command)
		compound=
		    Controls how to combine text and image in the button. By default, if an image or bitmap is given, it is drawn instead of the text. If this option is set to CENTER, the text is drawn on top of the image. If this option is set to one of BOTTOM, LEFT, RIGHT, or TOP, the image is drawn besides the text (use BOTTOM to draw the image under the text, etc.). Default is NONE. (compound/Compound) 
		cursor=
		    The cursor to show when the mouse is moved over the button. (cursor/Cursor)
		relief=
		    Border decoration. Usually, the button is SUNKEN when pressed, and RAISED otherwise. Other possible values are GROOVE, RIDGE, and FLAT. Default is RAISED. (relief/Relief) 
	    text=
    		The text to display in the button. The text can contain newlines. 
__________________________________________________________________________________
Button
__________________________________________________________________________________
from Tkinter import *

master = Tk()

def callback():
    print "click!"

b = Button(master, text="OK", command=callback)
b.pack()

mainloop()
__________________________________________________________________________________
	
	Label
		anchor=
		    Controls where in the label the text (or image) should be located. Use one of N, NE, E, SE, S, SW, W, NW, or CENTER. Default is CENTER. (anchor/Anchor) 
		background=
		    The background color. The default is platform specific. (background/Background)
		bg=
		    Same as background. 
		font=
		    The font to use in the label. The label can only contain text in single font. The default is system specific. (font/Font)
		foreground=
		    The label color, used for for text and bitmap labels. The default is system specific. (foreground/Foreground)
		fg=
		    Same as foreground. 
		height=
__________________________________________________________________________________
Label
__________________________________________________________________________________
photo = PhotoImage(file="icon.gif")
w = Label(parent, image=photo)
w.photo = photo
w.pack()
__________________________________________________________________________________
w = Label(master, text="Rouge", fg="red")
w = Label(master, text="Helvetica", font=("Helvetica", 16))
__________________________________________________________________________________

Entry
	textvariable=
	    Associates a Tkinter variable (usually a StringVar) to the contents of the entry field. (textVariable/Variable) 
__________________________________________________________________________________
Checkbutton
	variable =
	     Asocia una variable Tkinter al botón. Cuando se presiona el botón, la variable se alterna entre el valor de desactivación y el valor de activación. Los cambios explícitos a la variable se reflejan automáticamente en los botones. (variable / variable)
		deselect() [#]

	    Deselects the checkbox; that is, sets the value to offvalue. 
	flash() [#]

	    Redraws the button several times, alternating between active and normal appearance.
	invoke() [#]

	    Calls the command associated with the button.
	select() [#]

	    Selects the button; that is, sets the value to onvalue. 
	toggle() [#]

	    Toggles the button.
__________________________________________________________________________________
Radiobutton
	indicatoron=
	    If true, the widget uses the standard radio button look. If false, the selected button is drawn as SUNKEN instead. Default is true. (indicatorOn/IndicatorOn)
__________________________________________________________________________________
Variables de control

Las variables de control son objetos especiales que se asocian a los widgets para almacenar sus valores y 
facilitar su disponibilidad en otras partes del programa. Pueden ser de tipo numérico, de cadena y booleano. 

entero = IntVar()  # Declara variable de tipo entera
flotante = DoubleVar()  # Declara variable de tipo flotante
cadena = StringVar()  # Declara variable de tipo cadena
booleano = BooleanVar()  # Declara variable de tipo booleana

 También, en el momento de declarar una variable es posible asignar un valor inicial:

blog = StringVar(value="Python para impacientes")

Esta conexión funciona en ambos sentidos: si la variable cambia por algún motivo, el widget al que está conectado se actualizará para reflejar el nuevo valor.

Metodos
	.set()
	.get()
__________________________________________________________________________________

grid

Using the grid manager is easy. Just create the widgets, and use 
the grid method to tell the manager in which row and column to place them.
 You don’t have to specify the size of the grid beforehand; the manager 
 automatically determines that from the widgets in it.
 __________________________________________________________________________________
 pack

expand=
    Specifies whether the widgets should be expanded to fill any extra space in the geometry master. 
fill=
    Specifies whether the widget should occupy all the space provided to it by the master. If NONE (default), keep the widget’s original size. If X (fill horizontally), Y (fill vertically), or BOTH, fill the given space along that direction.
    To make a widget fill the entire master widget, set fill to BOTH and expand to a non-zero value. 
side=
    Specifies which side to pack the widget against. To pack widgets vertically, use TOP (default). To pack widgets horizontally, use LEFT.
    You can also pack widgets along the BOTTOM and RIGHT edges
__________________________________________________________________________________

EVENTOS
Tkinter proporciona un mecanismo poderoso para permitirle lidiar con los eventos usted mismo. Para cada widget, puede enlazar funciones y métodos de Python a eventos.